plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.br'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    performanceTestImplementation {
        extendsFrom testImplementation
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.8.2'
    testImplementation 'io.rest-assured:spring-mock-mvc:5.3.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.3.1'
    testImplementation('io.rest-assured:rest-assured:5.3.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
        exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
    }
    testImplementation 'io.gatling:gatling-app:3.9.5'
    testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.9.5'
}

task performanceTest(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.test.runtimeClasspath + configurations.performanceTestImplementation
    main = 'io.gatling.app.Gatling'
    args = ['-s', 'com.br.sistemarestaurante.performance.PerformanceSimulation']
}

tasks.named('test') {
    useJUnitPlatform()
}


jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/br/sistemarestaurante/infrastructure/persistence/entity/**', 'com/br/sistemarestaurante/domain/entity/**'])
        })
    }
}
